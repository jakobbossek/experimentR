% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import.R
\name{import}
\alias{import}
\title{Import result file from EMOA experiments.}
\usage{
import(files, param.sep = NULL, param.format.string, append.params = TRUE,
  parser = parserDatatable, combiner = rbind, continue.on.error = TRUE,
  ...)
}
\arguments{
\item{files}{[\code{character}]\cr
List of full paths to results files obtained, e.g., via \code{\link[base]{list.files}}.}

\item{param.sep}{[\code{character(1)}]\cr
Character used as \dQuote{split}-value to extract parameter settings from result paths.}

\item{param.format.string}{[\code{character(1)}]\cr
Formal format specification for paths to result files. E.g.,
\dQuote{prob{c}/x{i}_y{n}_z{l}/repl{i}/filename.csv}.}

\item{append.params}{[\code{logical(1)}]\cr
Should parameter extracted from result paths be appended to results?
Default is \code{TRUE}.}

\item{parser}{[\code{function(file, ...)}]\cr
Function used to read the file.
Default is \code{parserDatatable}, which is basically \code{\link[data.table]{fread}},
with some adapted parameters.}

\item{combiner}{[\code{function}]\cr
Function used to combine imported results from multiple results files.
Default is \code{\link[base]{rbind}}, since the default parser returns data frames.}

\item{continue.on.error}{[\code{logical(1)}]\cr
Should the import process be continued if an error occurs due to failed file or file name parsing?
Default is \code{TRUE}. In this case errors are logged and a log-file is written to the current
working directory.}

\item{...}{[any]\cr
Further optional arguments passed down to \code{parser}.}
}
\value{
\code{any} Reduced results (\code{data.frame} by default).
}
\description{
When large-scale experiments are performed, e.g., in machine learning studies
or benchmarking of multi-objective optimization algorithms, usually the results of experimental
runs are somehow stored in files in the file system. These files are not stored arbitrarily, but
rather the way they are stored follows some folder structure. Imagine we run a stochastic algorithm
\dQuote{myalgo} in total for \eqn{10} replications on problem instances \dQuote{instance-1} and \dQuote{instance-2}.
The algorithm has parameters. Here, we assume the logical parameter \eqn{a} and the numeric parameter
\eqn{b} to be varied. Moreover, assume that the root folder of results files is \dQuote{/results/}.
Then, a possible folder structure below \dQuote{/results/} is
\dQuote{/results/instance-1/myalgo_TRUE_0.5/1/res.csv}. In order to evaluate the data one usually needs
to gather all or partial results in a single, e.g., \code{data.frame} and append the instance, algorithm
parameter and replication. The following \code{\link{import}} function does exactly this in a convenient
manner. Here, we pass a character vector of full files paths and an essential format string. The latter
is the very nice part of the function and lets the user specify the names and atomic data types of the
algorithm parameters with a nice notation. For the upper example we would set \code{param.format.string}
to \dQuote{/results/instance{c}/algorithm{c}_a{l}_b{n}/replication{i}/filename.csv}. All fragments in the
format string with an \dQuote{\{.\}} appended are interpreted as parameter which should be imported from
the file(s) paths. The values inside the curly braces specify the data type, e.g., \dQuote{i} for \dQuote{integer}.
}
